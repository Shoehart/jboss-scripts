#!/bin/bash
set -e

BASE_DIR=`cd "$(dirname "$0")"; pwd`
source "$BASE_DIR"/common

cd "$BASE_DIR"

sed_i() { 
  case $OSTYPE in
    linux*|cygwin) sed -i "$@";;
    darwin*) sed -i '' "$@";;
  esac
}

jboss-cli() {
  $JBOSS_DIR/bin/jboss-cli.sh "$@"
}

check-configured-zip() {
  JBOSS_CONFIGURED=false

  if [ "$1" = "-f" ]
  then
    echo "Removing configured JBoss ($JBOSS_CONFIGURED_ZIP) ..."
    rm -f $JBOSS_CONFIGURED_ZIP
  fi

  if [ -f $JBOSS_CONFIGURED_ZIP ]
  then
    JBOSS_ZIP=$JBOSS_CONFIGURED_ZIP
    JBOSS_CONFIGURED=true
  fi
}

remove-existing() {
  if [ -d "$JBOSS_DIR" ]
  then
    echo "Removing existing installation ($JBOSS_DIR) ..."
    rm -rf "$JBOSS_DIR"
  fi
}

extract-new() {
  echo "Extracting \"$JBOSS_ZIP\" ..."
  unzip -q "$JBOSS_ZIP"
}

add-user() {
  case "$JBOSS_VERSION" in
    5*)
      echo "TODO: implement add-user for JBoss version $JBOSS_VERSION"
      return
      ;;
  esac

  echo "  Adding JBoss admin user ($JBOSS_ADMIN_USER) ..."
  $JBOSS_DIR/bin/add-user.sh -s -u "$JBOSS_ADMIN_USER" -p "$JBOSS_ADMIN_PASSWORD"
}

add-user-keycloak() {
  if [ "$JBOSS_NAME" =  "rh-sso" ]
  then
    echo "  Adding RH_SSO admin user ($RH_SSO_ADMIN_USER) ..."
    $JBOSS_DIR/bin/add-user-keycloak.sh -u "$RH_SSO_ADMIN_USER" -p "$RH_SSO_ADMIN_PASSWORD" > /dev/null
  fi
}

extract-native-components() {
  if [ "$JBOSS_VERSION" = "6.4" -a -r "$JBOSS_NATIVE_COMPONENTS_ZIP" ]
  then
    echo "  Extracting native components (\"$JBOSS_NATIVE_COMPONENTS_ZIP\")..."
    unzip -q $JBOSS_NATIVE_COMPONENTS_ZIP

    echo '  TODO: Using the Management CLI, activate the native components:'
    echo '/subsystem=web:write-attribute(name=native,value=true)"'
  fi
}

apply-jboss-patches() {
  if [ "${JBOSS_PATCHES[*]}" ]
  then
    echo "  Applying JBoss patches ..."
  else
    echo "  JBOSS_PATCHES array not configured! Skipping patches ..."
    return
  fi

  local n
  for n in `seq ${#JBOSS_PATCHES[*]}`
  do
    local patch=${JBOSS_PATCHES[$n]}
    echo "    Applying $patch ..."
    $JBOSS_DIR/bin/jboss-cli.sh --command="patch apply --override-all $patch" > /dev/null
  done
}

apply-user-patches() {
  local patch_sufix=".patch"
  local f
  local patches_dir=`dirname "$(readlink "$0")"`/../patches/$JBOSS_DIR

  if [ -d "$patches_dir" ]
  then
    patches_dir=`cd "$patches_dir"; pwd`
  else
    echo "  user-patches not found (in $patches_dir)! Skipping patches ..."
    return
  fi

  echo "  Applying user patches (from \"$patches_dir\")..."

  cd "$patches_dir"
  echo "    Copying patches to $JBOSS_DIR ..."
  rsync -a . "$BASE_DIR"/$JBOSS_DIR/
  cd - &> /dev/null

  for f in $(find $JBOSS_DIR -name \*$patch_sufix)
  do
    echo "    Saving ${f%$patch_sufix} with \".original\" extension ..."
    cp ${f%$patch_sufix} ${f%$patch_sufix}.original
    echo "    Applying $f ..."
    patch ${f%$patch_sufix} < $BASE_DIR/$f > /dev/null
  done
}

configure-jboss-variables() {
  local f=$JBOSS_DIR/bin/standalone.conf

  echo "  Setting JBOSS_BIND_ADDRESS_MANAGEMENT ($JBOSS_BIND_ADDRESS_MANAGEMENT) in $f ..."
  sed_i "s/JBOSS_BIND_ADDRESS_MANAGEMENT/$JBOSS_BIND_ADDRESS_MANAGEMENT/g" $f

  echo "  Setting JBOSS_BIND_ADDRESS ($JBOSS_BIND_ADDRESS) in $f ..."
  sed_i "s/JBOSS_BIND_ADDRESS/$JBOSS_BIND_ADDRESS/g" $f
}

install-oracle-driver() {
  local cli=/tmp/oracle-module.cli

  cat > $cli <<EOF
module add \
--name=oracle.jdbc \
--resources=$ORACLE_DRIVER \
--dependencies=javax.api,javax.transaction.api
EOF
  echo "  Installing oracle.jdbc module ..."
  rm -rf "$JBOSS_DIR"/modules/system/layers/base/oracle/
  jboss-cli --file=$cli
  mv "$JBOSS_DIR"/modules/oracle "$JBOSS_DIR"/modules/system/layers/base/

  # http://wildfly.org/news/2015/03/13/Offline-CLI/
  cat > $cli <<EOF
embed-server --server-config=standalone.xml
batch
/subsystem=datasources/\
jdbc-driver=oracle:add(\
driver-name="oracle",\
driver-module-name="oracle.jdbc",\
driver-class-name=oracle.jdbc.driver.OracleDriver)
run-batch
stop-embedded-server
EOF
  echo "  Configuring oracle jdbc driver ..."
  jboss-cli --file=$cli
}

create-configured-zip() {
  case "$JBOSS_VERSION" in
    5*)
      echo "TODO: implement create-configured-zip for JBoss version $JBOSS_VERSION"
      return
      ;;
  esac

  if ! $JBOSS_CONFIGURED
  then
    echo "Creating \"$JBOSS_CONFIGURED_ZIP\" ..."
    add-user
    add-user-keycloak
    apply-jboss-patches
    # INFO: native components must be installed after applying jboss patches, otherwise it fails!
    extract-native-components
    apply-user-patches
    configure-jboss-variables
    [ -f "$ORACLE_DRIVER" ] && install-oracle-driver || true
    echo "  Creating zip ..."
    zip -qr $JBOSS_CONFIGURED_ZIP $JBOSS_DIR
  fi
}

check-configured-zip "$@"
remove-existing
extract-new
create-configured-zip
