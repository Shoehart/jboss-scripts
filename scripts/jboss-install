#!/bin/bash
set -e

BASE_DIR=`cd "$(dirname "$0")"; pwd`
source "$BASE_DIR"/common

cd "$BASE_DIR"

sed_i() { 
  case $OSTYPE in
    linux*|cygwin) sed -i "$@";;
    darwin*) sed -i '' "$@";;
  esac
}

jboss-cli() {
  "$BASE_DIR"/jboss-cli "$@" > /dev/null
}

jboss-is-running() {
  local running_state=`"$BASE_DIR"/jboss-cli -c --commands=":read-attribute(name=server-state)" 2> /dev/null` || true
  grep -q "running" <<< $running_state
}

jboss-start-and-wait-for-running-state() {
  echo "    Starting $JBOSS_NAME ..."
  export LAUNCH_JBOSS_IN_BACKGROUND=true
  export JBOSS_PIDFILE=/tmp/$JBOSS_NAME.$$.pid
  $JBOSS_DIR/bin/standalone.sh &> /dev/null &
  while true
  do
    [ -f "$JBOSS_PIDFILE" ] && break
    echo "      Waiting for file $JBOSS_PIDFILE ..."
    sleep 1
  done
  JBOSS_PID=`cat $JBOSS_PIDFILE`
  echo "      $JBOSS_NAME is running with pid $JBOSS_PID"
  trap jboss-stop INT TERM EXIT

  while true
  do
    jboss-is-running && break
    echo "      Waiting for $JBOSS_NAME (pid $JBOSS_PID) running state ..."
    sleep 1
  done
}

jboss-stop() {
  if [ "$JBOSS_PID" ]
  then
    echo "  Stopping $JBOSS_NAME (pid $JBOSS_PID) ..."
    kill $JBOSS_PID
    unset JBOSS_PID
  fi
}

check-configured-zip() {
  JBOSS_CONFIGURED=false

  if [ "$1" = "-f" ]
  then
    echo "Removing configured JBoss ($JBOSS_CONFIGURED_ZIP) ..."
    rm -f $JBOSS_CONFIGURED_ZIP
  fi

  if [ -f $JBOSS_CONFIGURED_ZIP ]
  then
    JBOSS_ZIP=$JBOSS_CONFIGURED_ZIP
    JBOSS_CONFIGURED=true
  fi
}

remove-existing() {
  if [ -d "$JBOSS_DIR" ]
  then
    echo "Removing existing installation ($JBOSS_DIR) ..."
    rm -rf "$JBOSS_DIR"
  fi
}

extract-new() {
  echo "Extracting \"$JBOSS_ZIP\" ..."
  unzip -q "$JBOSS_ZIP"
}

add-user() {
  case "$JBOSS_VERSION" in
    5*)
      echo "TODO: implement add-user for JBoss version $JBOSS_VERSION"
      return
      ;;
  esac

  echo "  Adding JBoss admin user ($JBOSS_ADMIN_USER) ..."
  $JBOSS_DIR/bin/add-user.sh -s -u "$JBOSS_ADMIN_USER" -p "$JBOSS_ADMIN_PASSWORD"
}

add-user-keycloak() {
  if [ "$JBOSS_NAME" =  "rh-sso" ]
  then
    echo "  Adding RH-SSO admin user ($RH_SSO_ADMIN_USER) ..."
    $JBOSS_DIR/bin/add-user-keycloak.sh -u "$RH_SSO_ADMIN_USER" -p "$RH_SSO_ADMIN_PASSWORD" > /dev/null
  fi
}

extract-native-components() {
  if [ "$JBOSS_VERSION" = "6.4" -a -r "$JBOSS_NATIVE_COMPONENTS_ZIP" ]
  then
    echo "  Extracting native components (\"$JBOSS_NATIVE_COMPONENTS_ZIP\")..."
    unzip -q $JBOSS_NATIVE_COMPONENTS_ZIP

    echo '  TODO: Using the Management CLI, activate the native components:'
    echo '/subsystem=web:write-attribute(name=native,value=true)"'
  fi
}

apply-jboss-patches() {
  if [ "${JBOSS_PATCHES[*]}" ]
  then
    echo "  Applying JBoss patches ..."
  else
    echo "  JBOSS_PATCHES array not configured! Skipping patches ..."
    return
  fi

  local n
  for n in `seq ${#JBOSS_PATCHES[*]}`
  do
    local patch=${JBOSS_PATCHES[$n]}
    echo "    Applying $patch ..."
    jboss-cli --command="patch apply --override-all $patch"
  done
}

apply-user-patches() {
  local patch_sufix=".patch"
  local f
  local patches_dir=`dirname "$(readlink "$0")"`/../patches/$JBOSS_DIR

  if [ -d "$patches_dir" ]
  then
    patches_dir=`cd "$patches_dir"; pwd`
  else
    echo "  user-patches not found (in $patches_dir)! Skipping patches ..."
    return
  fi

  echo "  Applying user patches (from \"$patches_dir\")..."

  cd "$patches_dir"
  echo "    Copying patches to $JBOSS_DIR ..."
  rsync -a . "$BASE_DIR"/$JBOSS_DIR/
  cd - &> /dev/null

  for f in $(find $JBOSS_DIR -name \*$patch_sufix)
  do
    echo "    Saving ${f%$patch_sufix} with \".original\" extension ..."
    cp ${f%$patch_sufix} ${f%$patch_sufix}.original
    echo "    Applying $f ..."
    patch ${f%$patch_sufix} < $BASE_DIR/$f > /dev/null
  done
}

configure-jboss-variables() {
  local f=$JBOSS_DIR/bin/standalone.conf

  echo "  Setting jboss variables in $f ..."
  sed_i "
    s/JBOSS_BIND_ADDRESS_MANAGEMENT/$JBOSS_BIND_ADDRESS_MANAGEMENT/g ;
    s/JBOSS_BIND_ADDRESS/$JBOSS_BIND_ADDRESS/g ;
    s/JBOSS_SOCKET_BINDING_PORT_OFFSET/$JBOSS_SOCKET_BINDING_PORT_OFFSET/g
  " $f

  echo "    JBOSS_BIND_ADDRESS_MANAGEMENT=$JBOSS_BIND_ADDRESS_MANAGEMENT"
  echo "    JBOSS_BIND_ADDRESS=$JBOSS_BIND_ADDRESS"
  echo "    JBOSS_SOCKET_BINDING_PORT_OFFSET=$JBOSS_SOCKET_BINDING_PORT_OFFSET"
}

install-oracle-jdbc-driver() {
  if ! $ORACLE_JDBC_DRIVER_INSTALL
  then
    return 0
  else
    if ! [ -f "$ORACLE_JDBC_DRIVER" ]
    then
      echo "  Can't find \"$ORACLE_JDBC_DRIVER\". Please verify your configuration!"
      return 1
    fi
  fi

  local cli=/tmp/oracle-module.cli

  cat > $cli <<EOF
module add \
--name=oracle.jdbc \
--resources=$ORACLE_JDBC_DRIVER \
--dependencies=javax.api,javax.transaction.api
EOF
  echo "  Installing oracle.jdbc module ..."
  rm -rf "$JBOSS_DIR"/modules/system/layers/base/oracle/
  jboss-cli --file=$cli
  mv "$JBOSS_DIR"/modules/oracle "$JBOSS_DIR"/modules/system/layers/base/

  echo "  Adding oracle jdbc driver ..."

  local connect='--connect'
  case "$JBOSS_VERSION" in
    6.4)
      cli="$BASE_DIR"/cli/add-oracle-driver.eap6.cli
      jboss-start-and-wait-for-running-state
      ;;
    7.0)
      cli="$BASE_DIR"/cli/add-oracle-driver.cli
      unset connect
      ;;
    *)
      echo "    Invalid JBOSS_VERSION: $JBOSS_VERSION"
      return 1
      ;;
  esac

  echo "    Running \"$cli\" with jboss-cli ..."
  if [ -f "$cli" ]
  then
    jboss-cli $connect --file="$cli"
  else
    echo "      File not found!"
    return 1
  fi
}

install-rh-sso-adapter() {
  if ! $RH_SSO_ADAPTER_INSTALL
  then
    return 0
  fi

  echo "  Installing RH-SSO client adapter ..."
  echo "    Extracting \"$RH_SSO_ADAPTER_ZIP\" ..."
  unzip -q "$RH_SSO_ADAPTER_ZIP" -d "$JBOSS_DIR"

  local cli
  local connect='--connect'
  case "$JBOSS_VERSION" in
    6.4)
      cli="$JBOSS_DIR"/bin/adapter-install.cli
      jboss-is-running || jboss-start-and-wait-for-running-state
      ;;
    7.0)
      cli="$JBOSS_DIR"/bin/adapter-install-offline.cli
      unset connect
      ;;
    *)
      echo "    Invalid JBOSS_VERSION: $JBOSS_VERSION"
      return 1
      ;;
  esac

  echo "    Running \"$cli\" with jboss-cli ..."
  if [ -f "$cli" ]
  then
    jboss-cli $connect --file=$cli
  else
    echo "      File not found!"
    return 1
  fi
}

configure-https() {
  if ! $JBOSS_EAP_HTTPS_INSTALL
  then
    return 0
  fi

  echo "  Configuring HTTPS access ..."

  local keystore=$JBOSS_DIR/standalone/configuration/keystore.jks  
  echo "    Generating $keystore ..."
  keytool -genkey -noprompt -alias $JBOSS_NAME \
    -keyalg RSA -keystore $keystore -validity 10950 \
    -dname "CN=$KEYSTORE_SERVER_NAME" -ext san=ip:$KEYSTORE_SERVER_IP \
    -storepass secret -keypass secret

  local cert=$JBOSS_DIR/standalone/configuration/$JBOSS_NAME.cert
  echo "    Exporting $(basename $cert) from $keystore ..."
  keytool -export -alias $JBOSS_NAME -file $cert -storepass secret -keystore $keystore &> /dev/null

  local cacerts=$JAVA_HOME/jre/lib/security/cacerts
  echo "    Adding $(basename $cert) to $cacerts ..."
  while true
  do
    if sudo keytool -import -keystore $cacerts -alias $JBOSS_NAME -storepass changeit -file $cert -noprompt &> /dev/null
    then
      echo "      Added!"
      break
    else
      echo "      Already exists! Deleting it ... "
      sudo keytool -delete -keystore $cacerts -alias $JBOSS_NAME -storepass changeit -noprompt &> /dev/null || break
    fi
  done

  local cli
  local connect='--connect'
  case "$JBOSS_VERSION" in
    6.4)
      cli="$BASE_DIR"/cli/configure-https.eap6.cli
      jboss-is-running || jboss-start-and-wait-for-running-state
      ;;
    7.0)
      cli="$BASE_DIR"/cli/configure-https.cli
      unset connect
      ;;
    *)
      echo "    Invalid JBOSS_VERSION: $JBOSS_VERSION"
      return 1
      ;;
  esac

  echo "    Running \"$cli\" with jboss-cli ..."
  if [ -f "$cli" ]
  then
    jboss-cli $connect --file=$cli
  else
    echo "      File not found!"
    return 1
  fi
}

create-configured-zip() {
  case "$JBOSS_VERSION" in
    5*)
      echo "TODO: implement create-configured-zip for JBoss version $JBOSS_VERSION"
      return
      ;;
  esac

  if ! $JBOSS_CONFIGURED
  then
    echo "Creating \"$JBOSS_CONFIGURED_ZIP\" ..."
    add-user
    add-user-keycloak
    apply-jboss-patches
    # INFO: native components must be installed after applying jboss patches, otherwise it fails!
    extract-native-components
    apply-user-patches
    configure-jboss-variables
    install-oracle-jdbc-driver
    install-rh-sso-adapter
    configure-https
    jboss-stop
    echo "  Creating zip ..."
    zip -qr $JBOSS_CONFIGURED_ZIP $JBOSS_DIR
  fi
}

check-configured-zip "$@"
remove-existing
extract-new
create-configured-zip
